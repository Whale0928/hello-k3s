# ============================================
# Deployment: 애플리케이션 배포 및 관리
# ============================================
# 목적: Pod의 생성, 업데이트, 스케일링, 롤백을 관리
# ReplicaSet을 통해 원하는 Pod 개수를 유지
apiVersion: apps/v1
kind: Deployment
metadata:
  name: skk3s-deployment
  namespace: default
  labels:
    app: skk3s
spec:
  # 실행할 Pod 복제본 개수
  # 학습용: 1개, 프로덕션: 2개 이상 권장 (고가용성)
  replicas: 2

  # 롤링 업데이트 전략
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # 업데이트 중 최대 몇 개의 Pod를 추가로 생성할 수 있는가
      maxSurge: 1
      # 업데이트 중 최대 몇 개의 Pod를 동시에 종료할 수 있는가
      maxUnavailable: 0

  # Pod 선택 기준 (label selector)
  # app: skk3s 레이블을 가진 Pod만 관리
  selector:
    matchLabels:
      app: skk3s

  # Pod 템플릿 정의
  template:
    metadata:
      labels:
        app: skk3s
        version: v1
    spec:
      # ============================================
      # 컨테이너 정의
      # ============================================
      containers:
      - name: skk3s
        # 도커 이미지 지정
        # TODO: 실제 빌드한 이미지 경로로 변경 필요
        # 예: localhost:5000/skk3s:latest (로컬 레지스트리)
        # 예: docker.io/your-username/skk3s:v1.0.0 (DockerHub)
        image: skk3s:latest

        # 이미지 풀 정책
        # Always: 항상 레지스트리에서 pull
        # IfNotPresent: 로컬에 없으면 pull (학습용 권장)
        # Never: 로컬 이미지만 사용
        imagePullPolicy: IfNotPresent

        # 컨테이너 포트 설정 (문서화 목적)
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP

        # ============================================
        # 환경 변수 주입
        # ============================================
        # ConfigMap과 Secret에서 환경 변수 가져오기
        envFrom:
        - configMapRef:
            name: skk3s-config
        - secretRef:
            name: skk3s-secret

        # 개별 환경 변수 추가 (필요시)
        # env:
        # - name: CUSTOM_VAR
        #   value: "custom-value"
        # - name: POD_NAME
        #   valueFrom:
        #     fieldRef:
        #       fieldPath: metadata.name

        # ============================================
        # 리소스 제한 및 요청
        # ============================================
        # 목적: Pod의 CPU/메모리 사용량 제어
        resources:
          # requests: 최소 보장 리소스 (스케줄링 기준)
          requests:
            memory: "256Mi"
            cpu: "250m"  # 0.25 CPU 코어
          # limits: 최대 사용 가능 리소스 (초과 시 종료)
          limits:
            memory: "512Mi"
            cpu: "500m"  # 0.5 CPU 코어

        # ============================================
        # 헬스 체크 (Health Probes)
        # ============================================

        # Liveness Probe: 컨테이너가 살아있는지 확인
        # 실패 시 컨테이너를 재시작
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30  # 첫 체크 전 대기 시간
          periodSeconds: 10        # 체크 주기
          timeoutSeconds: 3        # 타임아웃
          failureThreshold: 3      # 연속 실패 횟수

        # Readiness Probe: 컨테이너가 트래픽을 받을 준비가 되었는지 확인
        # 실패 시 Service의 엔드포인트에서 제거 (재시작하지 않음)
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Startup Probe: 애플리케이션 시작 완료 확인 (Spring Boot 느린 시작 대응)
        # 성공 전까지 liveness/readiness probe 비활성화
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12  # 최대 60초 대기 (5초 * 12회)