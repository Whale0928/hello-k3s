# ============================================
# Service: 네트워크 접근 제공
# ============================================
# 목적: Pod에 안정적인 네트워크 엔드포인트 제공
# Pod IP는 변경될 수 있지만 Service IP는 고정
apiVersion: v1
kind: Service
metadata:
  name: skk3s-service
  namespace: default
  labels:
    app: skk3s
spec:
  # Service 타입 선택
  # ClusterIP: 클러스터 내부에서만 접근 (기본값, 프로덕션 권장)
  # NodePort: 노드의 특정 포트로 외부 접근 가능 (학습/개발용)
  # LoadBalancer: 클라우드 로드밸런서 사용 (클라우드 환경)
  type: NodePort

  # Pod 선택 기준 (label selector)
  # app: skk3s 레이블을 가진 Pod로 트래픽 전달
  selector:
    app: skk3s

  # 포트 매핑
  ports:
  - name: http
    protocol: TCP
    port: 8080        # Service 포트 (클러스터 내부에서 접근)
    targetPort: 8080  # Pod의 컨테이너 포트
    nodePort: 30080   # 노드 외부 포트 (30000-32767 범위)
    # 접근 방법: http://<node-ip>:30080

  # sessionAffinity 설정 (선택사항)
  # ClientIP: 동일 클라이언트 IP를 같은 Pod로 라우팅
  # None: 기본값, 라운드로빈 로드밸런싱
  # sessionAffinity: ClientIP
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800  # 3시간

# ============================================
# ClusterIP vs NodePort 선택 가이드
# ============================================
#
# ClusterIP 사용 시나리오:
# - Ingress를 통한 외부 접근 (프로덕션 권장)
# - 클러스터 내부 서비스 간 통신
# - 보안이 중요한 내부 API
#
# NodePort 사용 시나리오:
# - 로컬 개발/테스트 환경
# - Ingress 없는 간단한 배포
# - 빠른 프로토타이핑
#
# 프로덕션 구성 예시:
#   type: ClusterIP
#   + Ingress 리소스 추가
#   + 도메인 기반 라우팅